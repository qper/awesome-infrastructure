//region
pipeline {
    //agent {label "${params.run_on_node}"}
    agent any
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '60', artifactNumToKeepStr: '60'))
        //disableConcurrentBuilds()
        timeout(time: 180, unit: 'MINUTES')
        timestamps()
    }
    environment {
        FOO="BOO"
    }
    triggers {
        cron('H/5 * * * *')
    }
    parameters {
        choice(
                name: 'run_on_node',
                choices: [
                        'Jenkins',
                        'linux'
                ],
                description: 'select jenkins node to run code'
        )
        text(
                name: 'bash_code',
                defaultValue: '#!/usr/bin/env bash\nset -e\nenv|sort\n',
                description: 'put here any valid bash code'

        )
    }
    stages {
        stage("Change displayname") {
            steps { changeJobDisplayName() }
        }
        stage("Cleanup workspace") {
            steps { cleanWs() }
        }
        stage("Run setup") {
            steps { runSetup() }
        }
    }
    post {
        failure {
            emailext subject: '$DEFAULT_SUBJECT',
                    body: '$DEFAULT_CONTENT',
                    replyTo: 'alsmirnov@luxoft.com',
                    to: 'alsmirnov@luxoft.com'
        }
        always {
            cleanWs()
        }
    }
}
//endregion

//region Job settings
def changeJobDisplayName() {
    if (params.run_on_node != null){
        currentBuild.displayName = currentBuild.displayName + "::" +
                params.run_on_node
    }
}
//endregion

//region Run setup
def runSetup(){
    def bashCode = params.bash_code? params.bash_code :'pwd'
    echo "Run setup: "
    sh """
        $bashCode  
    """
}
//endregion
